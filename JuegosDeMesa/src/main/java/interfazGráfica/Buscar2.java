/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package interfazGráfica;

import ControladorDAO.GestionBBDD;
import ControladorDAO.InterfazDAO;
import Excepciones.ExcepcionMia;
import Modelo.Juego;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author eduardolucasmunozdelucas
 */
public class Buscar2 extends javax.swing.JDialog {

    private InterfazDAO daoEst;
    String tematica;
    private ArrayList<Juego> juegos = new ArrayList<>();
    Juego j;
    Juego z;
    String juegoSelecionado;

    /**
     * Creates new form Buscar
     */
    public Buscar2(java.awt.Frame parent, boolean modal) throws ExcepcionMia {
        super(parent, modal);
        initComponents();

        jComboBox1Tematica.addItem("-");
        daoEst = new GestionBBDD();
        for (String s : daoEst.leerTematica()) {
            jComboBox1Tematica.addItem(s);
        }

        jComboBox1NUmJug.addItem("-");
        for (int i = 1; i < 21; i++) {
            jComboBox1NUmJug.addItem("" + i);

        }
        jComboBox1Duracion1.addItem("-");
        for (int i = 5; i < 240; i += 5) {
            jComboBox1Duracion1.addItem("" + i);
        }

        jComboBox1Duracion2.setEnabled(false);

        // Agregar un ActionListener al primer JComboBox
        jComboBox1Duracion1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jComboBox1Duracion1.getSelectedItem() != null && !"-".equals(jComboBox1Duracion1.getSelectedItem())) {
                    // Limpiar el segundo JComboBox
                    jComboBox1Duracion2.removeAllItems();

                    // Obtener el valor seleccionado en el primer JComboBox
                    int duracionmin = Integer.parseInt(jComboBox1Duracion1.getSelectedItem().toString());

                    // Llenar el segundo JComboBox con valores apropiados
                    for (int i = duracionmin; i <= 240; i += 5) {
                        jComboBox1Duracion2.addItem(String.valueOf(i));
                    }

                    // Activar el segundo JComboBox
                    jComboBox1Duracion2.setEnabled(true);
                } else {
                    jComboBox1Duracion2.setEnabled(false);
                }
            }
        });

//        jComboBox1Duracion2.addItem("-");
        jComboBox1Expansiones.setEnabled(false);
        jButton1.setEnabled(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1Tematica = new javax.swing.JComboBox<>();
        jComboBox1Juegosencontrados = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jButton2okfinal = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jComboBox1Dif = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jButton1BUSCAROK = new javax.swing.JButton();
        jComboBox1NUmJug = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jComboBox1Expansiones = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        DueñodeJuego = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabelNombre = new javax.swing.JLabel();
        jLabelExpansionDe = new javax.swing.JLabel();
        jLabelDuracion = new javax.swing.JLabel();
        jLabelnumJugMax = new javax.swing.JLabel();
        jLabelminjug = new javax.swing.JLabel();
        jLabelDif = new javax.swing.JLabel();
        jLabelEstra = new javax.swing.JLabel();
        Suertee = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jComboBox1Duracion1 = new javax.swing.JComboBox<>();
        jLabel23 = new javax.swing.JLabel();
        jComboBox1Duracion2 = new javax.swing.JComboBox<>();
        jLabel24 = new javax.swing.JLabel();
        jLabel25Inter = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Nombre:");

        jButton2okfinal.setText("Salir");
        jButton2okfinal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2okfinalActionPerformed(evt);
            }
        });

        jLabel2.setText("Nº jugadores max:");

        jLabel3.setText("Numero jugadores min:");

        jLabel4.setText("Duracion: ");

        jLabel5.setText("Dificultad: ");

        jLabel6.setText("Estrategia:");

        jLabel7.setText("Suerte:");

        jLabel8.setText("Interacción:");

        jComboBox1Dif.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "1", "2", "3", "4", "5" }));

        jLabel9.setText("Dificultad:");

        jButton1BUSCAROK.setText("Buscar");
        jButton1BUSCAROK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1BUSCAROKActionPerformed(evt);
            }
        });

        jComboBox1NUmJug.setToolTipText("");

        jLabel10.setText("Nº de jugadores:");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel11.setText("Temática:");

        jLabel12.setText("Lista de juegos encontrados:");

        jLabel13.setText("JUEGO SELECIONADO:");

        jLabel14.setText("Descripción:");

        jLabel15.setText("Es una expansion del juego:");

        jComboBox1Expansiones.setForeground(new java.awt.Color(0, 51, 255));

        jLabel16.setText("Expansiones del juego: ");

        DueñodeJuego.setForeground(new java.awt.Color(0, 51, 255));

        jLabel18.setForeground(new java.awt.Color(0, 51, 255));

        jLabelNombre.setForeground(new java.awt.Color(0, 51, 255));

        jLabelExpansionDe.setForeground(new java.awt.Color(0, 51, 255));

        jLabelDuracion.setForeground(new java.awt.Color(0, 51, 255));

        jLabelnumJugMax.setForeground(new java.awt.Color(0, 51, 255));

        jLabelminjug.setForeground(new java.awt.Color(0, 51, 255));

        jLabelDif.setForeground(new java.awt.Color(0, 51, 255));

        jLabelEstra.setForeground(new java.awt.Color(0, 51, 255));

        Suertee.setForeground(new java.awt.Color(0, 51, 255));

        jLabel19.setText("min");

        jLabel20.setText("ID:");

        jButton1.setText("Ver esta expansión");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel21.setText("Duración de la partida:");

        jLabel22.setText("Entre:");

        jLabel23.setText("y:");

        jLabel24.setText("min");

        jLabel25Inter.setForeground(new java.awt.Color(0, 51, 255));

        jLabel25.setForeground(new java.awt.Color(0, 102, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 614, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2okfinal)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGap(43, 43, 43)
                                    .addComponent(jLabel16)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jComboBox1Expansiones, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jButton1))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(102, 102, 102)
                                    .addComponent(jLabel11)
                                    .addGap(45, 45, 45)
                                    .addComponent(jLabel9)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel10)
                                    .addGap(38, 38, 38)
                                    .addComponent(jLabel21)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jComboBox1Tematica, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(31, 31, 31)
                                        .addComponent(jComboBox1Dif, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(45, 45, 45)
                                        .addComponent(jComboBox1NUmJug, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(38, 38, 38)
                                        .addComponent(jLabel22)
                                        .addGap(6, 6, 6)
                                        .addComponent(jComboBox1Duracion1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel23)
                                        .addGap(6, 6, 6)
                                        .addComponent(jComboBox1Duracion2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel24))
                                    .addComponent(jLabel12)
                                    .addComponent(jComboBox1Juegosencontrados, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel13)
                                        .addGap(45, 45, 45)
                                        .addComponent(jLabel20)
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(84, 84, 84)
                                        .addComponent(DueñodeJuego, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabelNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(24, 24, 24)
                                        .addComponent(jLabel15)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabelDuracion, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel19))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabelnumJugMax)
                                        .addGap(74, 74, 74)
                                        .addComponent(jLabel3))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabelDif)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel6)
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabelEstra)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel7)
                                        .addGap(6, 6, 6)
                                        .addComponent(Suertee)
                                        .addGap(27, 27, 27)
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel25Inter))
                                    .addComponent(jLabel14))))
                        .addGap(6, 6, 6))
                    .addComponent(jButton1BUSCAROK))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel21))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox1Tematica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1Dif, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1NUmJug, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1Duracion1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1Duracion2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel22)
                            .addComponent(jLabel23)
                            .addComponent(jLabel24))))
                .addGap(18, 18, 18)
                .addComponent(jButton1BUSCAROK)
                .addGap(21, 21, 21)
                .addComponent(jLabel12)
                .addGap(6, 6, 6)
                .addComponent(jComboBox1Juegosencontrados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addComponent(jLabel20)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DueñodeJuego, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabelNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel15)
                        .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel16))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBox1Expansiones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabelDuracion, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabelnumJugMax)
                    .addComponent(jLabel3))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabelDif)
                    .addComponent(jLabel6)
                    .addComponent(jLabelEstra)
                    .addComponent(jLabel7)
                    .addComponent(Suertee)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(jLabel25Inter)))
                .addGap(15, 15, 15)
                .addComponent(jLabel14)
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2okfinal)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2okfinalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2okfinalActionPerformed

        dispose();

    }//GEN-LAST:event_jButton2okfinalActionPerformed

    private void jButton1BUSCAROKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1BUSCAROKActionPerformed

        jComboBox1Juegosencontrados.setEnabled(true);
        jComboBox1Juegosencontrados.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent f) {
                jComboBox1Expansiones.setEnabled(false);
                jButton1.setEnabled(false);
                actualizarTextFields();
            }
        });

        try {
            if (!"-".equals(jComboBox1Tematica.getSelectedItem().toString())) {
                String tematicaSeleccionada = jComboBox1Tematica.getSelectedItem().toString();
                System.out.println(tematicaSeleccionada);

                if (jComboBox1Duracion1.getSelectedItem().toString() != "-") {
                    int duracionMin = Integer.parseInt(jComboBox1Duracion1.getSelectedItem().toString());
                    int duracionMax = Integer.parseInt(jComboBox1Duracion2.getSelectedItem().toString());
                    System.out.println(duracionMax + " , " + duracionMin);

                    if (jComboBox1Dif.getSelectedItem().toString().equals("-") && jComboBox1NUmJug.getSelectedItem().toString().equals("-")) {

                        // Buscar por tematica y duracion
                        juegos = daoEst.buscarporTematicayDuracion(tematicaSeleccionada, duracionMin, duracionMax);
                        actualizarComboBox(juegos);
                        actualizarTextFields();
                        if (juegos.isEmpty()) {
                            busquedaSinResultados();
                            return;
                        }
                    } else if (jComboBox1Dif.getSelectedItem().toString() != "-" && jComboBox1NUmJug.getSelectedItem().toString().equals("-")) {
                        int dificultadSeleccionada = Integer.parseInt(jComboBox1Dif.getSelectedItem().toString());

                        //Buscar por tematica, duracion y dif
                        juegos = daoEst.buscarporTematicayDuracionyDificultad(tematicaSeleccionada, duracionMin, duracionMax, dificultadSeleccionada);
                        actualizarComboBox(juegos);
                        actualizarTextFields();
                        if (juegos.isEmpty()) {
                            busquedaSinResultados();
                            return;
                        }

                    } else if (jComboBox1Dif.getSelectedItem().toString().equals("-") && jComboBox1NUmJug.getSelectedItem().toString() != "-") {
                        // Buscar tematica  duracion y num jug
                        int numjugadores = Integer.parseInt(jComboBox1NUmJug.getSelectedItem().toString());

                        juegos = daoEst.buscarporTematicayDuracionyNumJug(tematicaSeleccionada, duracionMin, duracionMax, numjugadores);
                        actualizarComboBox(juegos);
                        actualizarTextFields();
                        if (juegos.isEmpty()) {
                            busquedaSinResultados();
                            return;
                        }

                    } else {
                        //Buscar las cuatro cosas
                        int dificultadSeleccionada = Integer.parseInt(jComboBox1Dif.getSelectedItem().toString());
                        int numjugadores = Integer.parseInt(jComboBox1NUmJug.getSelectedItem().toString());

                        juegos = daoEst.buscarporlas4(tematicaSeleccionada, duracionMin, duracionMax, numjugadores, dificultadSeleccionada);
                        actualizarComboBox(juegos);
                        actualizarTextFields();

                        if (juegos.isEmpty()) {
                            busquedaSinResultados();
                            return;
                        }
                    }

                } else {

                    if (jComboBox1Dif.getSelectedItem().toString().equals("-") && jComboBox1NUmJug.getSelectedItem().toString().equals("-")) {

                        // Buscar por tematica
                        juegos = daoEst.buscarporTematica(tematicaSeleccionada);
                        actualizarComboBox(juegos);
                        actualizarTextFields();
                        if (juegos.isEmpty()) {
                            busquedaSinResultados();
                            return;
                        }
                    } else if (jComboBox1Dif.getSelectedItem().toString() != "-" && jComboBox1NUmJug.getSelectedItem().toString().equals("-")) {
                        int dificultadSeleccionada = Integer.parseInt(jComboBox1Dif.getSelectedItem().toString());

                        //Buscar por  tematica dif
                        juegos = daoEst.buscarporTematicaYDificultad(tematicaSeleccionada, dificultadSeleccionada);
                        actualizarComboBox(juegos);
                        actualizarTextFields();
                        if (juegos.isEmpty()) {
                            busquedaSinResultados();
                            return;
                        }

                    } else if (jComboBox1Dif.getSelectedItem().toString().equals("-") && jComboBox1NUmJug.getSelectedItem().toString() != "-") {
                        // Buscar tematica y num jug
                        int numjugadores = Integer.parseInt(jComboBox1NUmJug.getSelectedItem().toString());

                        juegos = daoEst.buscarporTematicaYNumJug(tematicaSeleccionada, numjugadores);
                        actualizarComboBox(juegos);
                        actualizarTextFields();
                        if (juegos.isEmpty()) {
                            busquedaSinResultados();
                            return;
                        }

                    } else {
                        //Buscar tematica, num juga y difi
                        int dificultadSeleccionada = Integer.parseInt(jComboBox1Dif.getSelectedItem().toString());
                        int numjugadores = Integer.parseInt(jComboBox1NUmJug.getSelectedItem().toString());

                        juegos = daoEst.buscarporTemáticaYDificultadyNumJu(tematicaSeleccionada, numjugadores, dificultadSeleccionada);
                        actualizarComboBox(juegos);
                        actualizarTextFields();

                        if (juegos.isEmpty()) {
                            busquedaSinResultados();
                            return;
                        }
                    }
                }

            } else {

                if (!"-".equals(jComboBox1Duracion1.getSelectedItem().toString())) {
                    int duracionMin = Integer.parseInt(jComboBox1Duracion1.getSelectedItem().toString());
                    int duracionMax = Integer.parseInt(jComboBox1Duracion2.getSelectedItem().toString());

                    if (jComboBox1Dif.getSelectedItem().toString().equals("-") && jComboBox1NUmJug.getSelectedItem().toString().equals("-")) {

                        // Buscar por  duracion
                        juegos = daoEst.buscarporDuracion(duracionMin, duracionMax);
                        actualizarComboBox(juegos);
                        actualizarTextFields();
                        if (juegos.isEmpty()) {
                            busquedaSinResultados();
                            return;
                        }
                    } else if (jComboBox1Dif.getSelectedItem().toString() != "-" && jComboBox1NUmJug.getSelectedItem().toString().equals("-")) {
                        int dificultadSeleccionada = Integer.parseInt(jComboBox1Dif.getSelectedItem().toString());

                        //Buscar por  duracion y dif
                        juegos = daoEst.buscarporDuracionyDificultad(duracionMin, duracionMax, dificultadSeleccionada);
                        actualizarComboBox(juegos);
                        actualizarTextFields();
                        if (juegos.isEmpty()) {
                            busquedaSinResultados();
                            return;
                        }

                    } else if (jComboBox1Dif.getSelectedItem().toString().equals("-") && jComboBox1NUmJug.getSelectedItem().toString() != "-") {
                        // Buscar  duracion y num jug
                        int numjugadores = Integer.parseInt(jComboBox1NUmJug.getSelectedItem().toString());

                        juegos = daoEst.buscarporDuracionyNumJug(duracionMin, duracionMax, numjugadores);
                        actualizarComboBox(juegos);
                        actualizarTextFields();
                        if (juegos.isEmpty()) {
                            busquedaSinResultados();
                            return;
                        }

                    } else {
                        //Buscar duracion, num juga y difi
                        int dificultadSeleccionada = Integer.parseInt(jComboBox1Dif.getSelectedItem().toString());
                        int numjugadores = Integer.parseInt(jComboBox1NUmJug.getSelectedItem().toString());

                        juegos = daoEst.buscarporDuracionyNumJugyDificultad(duracionMin, duracionMax, numjugadores, dificultadSeleccionada);
                        actualizarComboBox(juegos);
                        actualizarTextFields();

                        if (juegos.isEmpty()) {
                            busquedaSinResultados();
                            return;
                        }
                    }

                } else {

                    if (jComboBox1Dif.getSelectedItem().toString().equals("-") && jComboBox1NUmJug.getSelectedItem().toString().equals("-")) {

                        busquedaSinResultados();

                    } else if (jComboBox1Dif.getSelectedItem().toString() != "-" && jComboBox1NUmJug.getSelectedItem().toString().equals("-")) {
                        //Buscar por dificultad
                        int dificultadSeleccionada = Integer.parseInt(jComboBox1Dif.getSelectedItem().toString());
                        juegos = daoEst.buscarporDificultad(dificultadSeleccionada);
                        actualizarComboBox(juegos);
                        actualizarTextFields();
                        if (juegos.isEmpty()) {
                            busquedaSinResultados();
                            return;
                        }

                    } else if (jComboBox1Dif.getSelectedItem().toString().equals("-") && jComboBox1NUmJug.getSelectedItem().toString() != "-") {
                        // Buscar num jug
                        int numjugadores = Integer.parseInt(jComboBox1NUmJug.getSelectedItem().toString());

                        juegos = daoEst.buscarporNumJugadores(numjugadores);
                        actualizarComboBox(juegos);
                        actualizarTextFields();
                        if (juegos.isEmpty()) {
                            busquedaSinResultados();
                            return;
                        }

                    } else {
                        //Buscar dif y num juga 
                        int dificultadSeleccionada = Integer.parseInt(jComboBox1Dif.getSelectedItem().toString());
                        int numjugadores = Integer.parseInt(jComboBox1NUmJug.getSelectedItem().toString());

                        juegos = daoEst.buscarporNumJugYDificultad(numjugadores, dificultadSeleccionada);
                        actualizarComboBox(juegos);
                        actualizarTextFields();

                        if (juegos.isEmpty()) {
                            busquedaSinResultados();
                            return;
                        }
                    }
                }

            }

            //-----------------------------------------
        } catch (ExcepcionMia ex) {
            Logger.getLogger(Buscar2.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error al buscar juegos: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButton1BUSCAROKActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (jComboBox1Expansiones.getSelectedItem() != null) {
            jComboBox1Juegosencontrados.setEnabled(false);
            juegoSelecionado = jComboBox1Expansiones.getSelectedItem().toString();
            System.out.println("juego selecionado" + juegoSelecionado);
            try {
                // Buscar el juego seleccionado en la lista de juegos
                for (Juego juego : daoEst.leerTodos2()) {
                    if (juego.getNombre().equals(juegoSelecionado)) {
                        j = juego;
                        break;
                    }
                }
            } catch (ExcepcionMia ex) {
                Logger.getLogger(Buscar2.class.getName()).log(Level.SEVERE, null, ex);
            }
            actualizar(j);
        } else {
            clearLabelsAndFields();

        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void clearLabelsAndFields() {
        jLabelDuracion.setText("");
        jLabelNombre.setText("");
        jLabelnumJugMax.setText("");
        jLabel25Inter.setText("");
        jLabelEstra.setText("");
        Suertee.setText("");
        jLabelminjug.setText("");
        jLabelDif.setText("");
        jTextArea1.setText("");
        jTextArea1.setEditable(false);
        jLabel18.setText("");
        DueñodeJuego.setText("");
        jLabel25.setText("");
//        jLabelExpansionDe.setText("");
        jComboBox1Expansiones.removeAllItems();
        jComboBox1Expansiones.setEnabled(false);
    }

    private void actualizar(Juego j) {

        if (j != null) {
            jComboBox1Expansiones.setEnabled(false);
            jLabelDuracion.setText(String.valueOf(j.getDuracion()));
            jLabelminjug.setText(String.valueOf(j.getNumJugMin()));
            jLabelnumJugMax.setText(String.valueOf(j.getNumJugMax()));
            jLabelNombre.setText(j.getNombre());
            jLabelDif.setText(String.valueOf(j.getDificultad()));
            jLabelEstra.setText(String.valueOf(j.getEstrategia()));
            Suertee.setText(String.valueOf(j.getSuerte()));
            jLabel25Inter.setText(String.valueOf(j.getInteraccion()));
//            jLabelExpansionDe.setText(j.getExpansionDe());
            jTextArea1.setText(j.getDescripcion());
            jTextArea1.setEditable(false);
             jTextArea1.setLineWrap(true);

        // Habilitar el ajuste de línea por palabras
        jTextArea1.setWrapStyleWord(true);
            jLabel18.setText(String.valueOf(j.getId()));
            DueñodeJuego.setText("(Dueño: " + j.getDueño() + ")");

//            if (j.getExpansionDe() != null) {
                jLabel25.setText(j.getExpansionDe());
//                jLabelExpansionDe.setText(j.getExpansionDe());
//                System.out.println("Espansion de: "+ j.getExpansionDe());
//            } else {
//                jLabelExpansionDe.setText("---");
//            }

            if (!j.getListaExpansiones().isEmpty() ) {
                jComboBox1Expansiones.removeAllItems();

                ArrayList<String> lista = j.getListaExpansiones();
                Collections.sort(lista);
                jButton1.setEnabled(true);

                System.out.println("esta es la lista de string" + lista.toString());

                jComboBox1Expansiones.setEnabled(true);
                for (String s : lista) {
                    jComboBox1Expansiones.addItem(s);
                }
            } else {
                jComboBox1Expansiones.removeAllItems();
                jComboBox1Expansiones.setEnabled(false);
                jButton1.setEnabled(false);
            }

        }
        System.out.println(" esta es el resultado de la quien es expansion" + j.getExpansionDe());

    }

    // Método para actualizar los TextFields basados en el juego seleccionado
    private void actualizarTextFields() {

        if (jComboBox1Juegosencontrados.getSelectedItem() != null) {
            juegoSelecionado = jComboBox1Juegosencontrados.getSelectedItem().toString();
            // Buscar el juego seleccionado en la lista de juegos
            for (Juego juego : juegos) {
                if (juego.getNombre().equals(juegoSelecionado)) {
                    j = juego;
                    break;
                }
            }
            actualizar(j);
        } else {
            clearLabelsAndFields();

        }

    }

    private void busquedaSinResultados() {
        jComboBox1Juegosencontrados.removeAllItems();
        actualizarTextFields();
        System.out.println("Salió lo que quería");
        JOptionPane.showMessageDialog(this, "Ningún juego encontrado con estas características", "Atención", JOptionPane.INFORMATION_MESSAGE);

    }

    private void actualizarComboBox(ArrayList<Juego> juegos) {
        jComboBox1Juegosencontrados.removeAllItems();
        for (Juego juego : juegos) {
            jComboBox1Juegosencontrados.addItem(juego.getNombre());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws ExcepcionMia {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Buscar2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Buscar2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Buscar2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Buscar2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Buscar2 dialog = null;
                try {
                    dialog = new Buscar2(new javax.swing.JFrame(), true);
                } catch (ExcepcionMia ex) {
                    Logger.getLogger(Buscar2.class.getName()).log(Level.SEVERE, null, ex);
                }
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel DueñodeJuego;
    private javax.swing.JLabel Suertee;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton1BUSCAROK;
    private javax.swing.JButton jButton2okfinal;
    private javax.swing.JComboBox<String> jComboBox1Dif;
    private javax.swing.JComboBox<String> jComboBox1Duracion1;
    private javax.swing.JComboBox<String> jComboBox1Duracion2;
    private javax.swing.JComboBox<String> jComboBox1Expansiones;
    private javax.swing.JComboBox<String> jComboBox1Juegosencontrados;
    private javax.swing.JComboBox<String> jComboBox1NUmJug;
    private javax.swing.JComboBox<String> jComboBox1Tematica;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel25Inter;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelDif;
    private javax.swing.JLabel jLabelDuracion;
    private javax.swing.JLabel jLabelEstra;
    private javax.swing.JLabel jLabelExpansionDe;
    private javax.swing.JLabel jLabelNombre;
    private javax.swing.JLabel jLabelminjug;
    private javax.swing.JLabel jLabelnumJugMax;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
